import React, { useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuthStore } from '../../hooks/useAuthStore';
import { useChildren, useChildActivities } from '../../hooks/useApiServices';
import { 
  PlusIcon, 
  UserIcon, 
  TrophyIcon,
  ChartBarIcon,
  CalendarIcon,
  PlayIcon,
  EyeIcon,
  PencilIcon,
  TrashIcon,
  StarIcon,
  FireIcon,
  AcademicCapIcon
} from '@heroicons/react/24/outline';

// Import Common Components
import {
  DataTable,
  Modal,
  ConfirmationModal,
  FormModal,
  LoadingSpinner,
  ErrorBoundary,
  tableActions
} from '../common';
import { DashboardLayout } from '../layout';

const ParentDashboard = () => {
  const { user } = useAuthStore();
  const navigate = useNavigate();
  const { children, isLoading: childrenLoading, createChild, updateChild, deleteChild, isCreating } = useChildren();
  const [selectedChildId, setSelectedChildId] = useState(null);
  
  // Modal states
  const [showAddChildModal, setShowAddChildModal] = useState(false);
  const [showEditChildModal, setShowEditChildModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [selectedChild, setSelectedChild] = useState(null);
  const [childToDelete, setChildToDelete] = useState(null);
  const [isFormValid, setIsFormValid] = useState(false);
  
  // Get activities for the first child (or selected child)
  const firstChildId = children.length > 0 ? children[0].id : null;
  const { activities: recentActivities = [] } = useChildActivities(
    selectedChildId || firstChildId, 
    { limit: 5, status: 'completed' }
  );

  // Calculate quick stats
  const quickStats = {
    totalChildren: children.length,
    totalPoints: children.reduce((sum, child) => sum + (child.totalPoints || 0), 0),
    completedActivities: recentActivities.length,
    averageProgress: children.length > 0 
      ? Math.round(children.reduce((sum, child) => sum + (child.progress || 0), 0) / children.length) 
      : 0
  };

  // Table configuration for children
  const columns = [
    { 
      accessor: 'name', 
      header: 'Nome', 
      sortable: true,
      render: (value, row) => (
        <div className="flex items-center space-x-3">
          <div className="w-8 h-8 bg-gradient-to-r from-primary-500 to-secondary-500 rounded-full flex items-center justify-center">
            <span className="text-white text-sm font-semibold">
              {value.charAt(0)}
            </span>
          </div>
          <span className="font-medium">{value}</span>
        </div>
      )
    },
    { 
      accessor: 'age', 
      header: 'Età', 
      sortable: true,
      render: (value) => `${value} anni`
    },
    { 
      accessor: 'totalPoints', 
      header: 'Punti Totali', 
      sortable: true,
      render: (value) => (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
          {value || 0} punti
        </span>
      )
    },
    { 
      accessor: 'lastActivity', 
      header: 'Ultima Attività', 
      type: 'date',
      sortable: true,
      render: (value) => value ? new Date(value).toLocaleDateString('it-IT') : 'Nessuna'
    },
    { 
      accessor: 'progress', 
      header: 'Progressi',
      render: (value) => (
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div 
            className="bg-primary-600 h-2 rounded-full transition-all duration-300" 
            style={{ width: `${value || 0}%` }}
          />
        </div>
      )
    }
  ];
  // Table actions
  const actions = [
    tableActions.view((child) => {
      navigate(`/parent/children/${child.id}`);
    }),
    tableActions.edit((child) => {
      setSelectedChild(child);
      setShowEditChildModal(true);
    }),
    tableActions.delete((child) => {
      setChildToDelete(child);
      setShowDeleteModal(true);
    })
  ];

  // Handlers
  const handleAddChild = useCallback(async (formData) => {
    try {
      await createChild(formData);
      setShowAddChildModal(false);
      return { success: true };
    } catch (error) {
      return { 
        success: false, 
        error: error.message || 'Errore nella creazione del bambino' 
      };
    }
  }, [createChild]);

  const handleEditChild = useCallback(async (formData) => {
    try {
      await updateChild(selectedChild.id, formData);
      setShowEditChildModal(false);
      setSelectedChild(null);
      return { success: true };
    } catch (error) {
      return { 
        success: false, 
        error: error.message || 'Errore nella modifica del bambino' 
      };
    }
  }, [updateChild, selectedChild]);

  const handleDeleteChild = useCallback(async () => {
    try {
      await deleteChild(childToDelete.id);
      setShowDeleteModal(false);
      setChildToDelete(null);
      return { success: true };
    } catch (error) {
      console.error('Errore nell\'eliminazione:', error);
      return { 
        success: false, 
        error: error.message || 'Errore nell\'eliminazione del bambino' 
      };
    }
  }, [deleteChild, childToDelete]);

  const handleFormValidation = useCallback((isValid) => {
    setIsFormValid(isValid);
  }, []);

  // Quick actions
  const quickActions = [
    {
      title: 'Aggiungi Bambino',
      description: 'Registra un nuovo bambino',
      icon: PlusIcon,
      color: 'primary',
      onClick: () => setShowAddChildModal(true)
    },
    {
      title: 'Visualizza Progressi',
      description: 'Controlla i progressi dei tuoi bambini',
      icon: ChartBarIcon,
      color: 'secondary',
      onClick: () => navigate('/parent/progress')
    },
    {
      title: 'Attività Recenti',
      description: 'Vedi le ultime attività completate',
      icon: CalendarIcon,
      color: 'accent',
      onClick: () => navigate('/parent/activities')
    }
  ];

  // Fallback to mock data if API is not available
  const mockChildren = [
    {
      id: 1,
      name: 'Sofia Rossi',
      age: 6,
      avatar: '👧',
      level: 5,
      totalPoints: 320,
      currentStreak: 7,
      lastActivityDate: '2025-06-11',
      completedActivities: 15,
      progress: 78,
      status: 'active'
    },
    {
      id: 2,
      name: 'Marco Rossi',
      age: 8,
      avatar: '👦',
      level: 3,
      totalPoints: 180,
      currentStreak: 3,
      lastActivityDate: '2025-06-10',
      completedActivities: 8,
      progress: 54,
      status: 'active'
    },
  ];

  const mockActivities = [
    {
      id: 1,
      title: 'Routine mattutina completata',
      pointsReward: 50,
      completedAt: '2025-06-11T08:00:00Z',
      child: { name: 'Sofia' },
    },
    {
      id: 2,
      title: 'Quiz sui denti superato',
      pointsReward: 30,
      completedAt: '2025-06-11T10:30:00Z',
      child: { name: 'Marco' },
    },
  ];

  // Use real data if available, otherwise use mock data
  const displayChildren = children.length > 0 ? children : mockChildren;
  const displayActivities = recentActivities.length > 0 ? recentActivities : mockActivities;

  // Table configuration for children
  const childrenColumns = [
    { 
      accessor: 'name', 
      header: 'Nome', 
      sortable: true,
      render: (value, row) => (
        <div className="flex items-center space-x-3">
          <div className="w-10 h-10 bg-gradient-to-r from-primary-500 to-secondary-500 rounded-full flex items-center justify-center text-white font-semibold">
            {row.avatar || value.charAt(0)}
          </div>
          <div>
            <span className="font-medium text-gray-900">{value}</span>
            <p className="text-sm text-gray-500">{row.age} anni</p>
          </div>
        </div>
      )
    },
    { 
      accessor: 'level', 
      header: 'Livello', 
      sortable: true,
      render: (value) => (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
          <StarIcon className="h-3 w-3 mr-1" />
          Lv. {value || 1}
        </span>
      )
    },
    { 
      accessor: 'totalPoints', 
      header: 'Punti', 
      sortable: true,
      render: (value) => (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
          <TrophyIcon className="h-3 w-3 mr-1" />
          {value || 0}
        </span>
      )
    },
    { 
      accessor: 'currentStreak', 
      header: 'Streak', 
      sortable: true,
      render: (value) => (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
          <FireIcon className="h-3 w-3 mr-1" />
          {value || 0} giorni
        </span>
      )
    },
    { 
      accessor: 'progress', 
      header: 'Progresso',
      render: (value) => (
        <div className="w-full">
          <div className="flex justify-between text-xs text-gray-600 mb-1">
            <span>Progresso</span>
            <span>{value || 0}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-gradient-to-r from-primary-500 to-secondary-500 h-2 rounded-full transition-all duration-500" 
              style={{ width: `${value || 0}%` }}
            />
          </div>
        </div>
      )
    },
    { 
      accessor: 'lastActivityDate', 
      header: 'Ultima Attività', 
      type: 'date',
      sortable: true,
      render: (value) => {
        if (!value) return 'Mai';
        const date = new Date(value);
        return date.toLocaleDateString('it-IT');
      }
    }
  ];

  // Table actions for children
  const childrenActions = [
    {
      label: 'Inizia Gioco',
      icon: <PlayIcon className="h-4 w-4" />,
      onClick: (child) => navigate(`/parent/game/${child.id}`),
      className: 'text-green-600 hover:text-green-800'
    },
    {
      label: 'Visualizza',
      icon: <EyeIcon className="h-4 w-4" />,
      onClick: (child) => navigate(`/parent/child/${child.id}`),
      className: 'text-blue-600 hover:text-blue-800'
    },
    {
      label: 'Modifica',
      icon: <PencilIcon className="h-4 w-4" />,
      onClick: (child) => {
        setSelectedChild(child);
        setShowEditChildModal(true);
      },
      className: 'text-yellow-600 hover:text-yellow-800'
    },
    {
      label: 'Elimina',
      icon: <TrashIcon className="h-4 w-4" />,
      onClick: (child) => {
        setChildToDelete(child);
        setShowDeleteModal(true);
      },
      className: 'text-red-600 hover:text-red-800'
    }
  ];

  // Handlers
  const handleAddChild = useCallback(async (formData) => {
    try {
      // In real implementation, this would call the API
      console.log('Adding child:', formData);
      // await createChild(formData);
      setShowAddChildModal(false);
    } catch (error) {
      console.error('Error adding child:', error);
    }
  }, []);

  const handleEditChild = useCallback(async (formData) => {
    try {
      console.log('Editing child:', formData);
      // await updateChild(selectedChild.id, formData);
      setShowEditChildModal(false);
      setSelectedChild(null);
    } catch (error) {
      console.error('Error editing child:', error);
    }
  }, [selectedChild]);

  const handleDeleteChild = useCallback(async () => {
    if (!childToDelete) return;
    
    try {
      console.log('Deleting child:', childToDelete);
      // await deleteChild(childToDelete.id);
      setShowDeleteModal(false);
      setChildToDelete(null);
    } catch (error) {
      console.error('Error deleting child:', error);
    }
  }, [childToDelete]);

  // Helper function to format activity timestamps
  function formatTimestamp(timestamp) {
    const date = new Date(timestamp);
    const now = new Date();
    const diffInHours = Math.floor((now - date) / (1000 * 60 * 60));
    
    if (diffInHours < 1) return 'Pochi minuti fa';
    if (diffInHours < 24) return `${diffInHours} ore fa`;
    return `${Math.floor(diffInHours / 24)} giorni fa`;
  }

  // Statistics calculations
  const totalPoints = displayChildren.reduce((total, child) => total + (child.totalPoints || 0), 0);
  const totalActivities = displayChildren.reduce((total, child) => total + (child.completedActivities || 0), 0);
  const averageProgress = displayChildren.length > 0 
    ? Math.round(displayChildren.reduce((total, child) => total + (child.progress || 0), 0) / displayChildren.length)
    : 0;

  return (
    <ErrorBoundary>
      <DashboardLayout>
        <div className="space-y-8">
          {/* Welcome Header */}
          <div className="bg-gradient-to-r from-primary-500 to-secondary-500 rounded-2xl p-8 text-white">
            <div className="flex justify-between items-start">
              <div>
                <h1 className="text-3xl font-bold mb-2">
                  Benvenuto, {user?.firstName || user?.first_name || 'Genitore'}! 👋
                </h1>
                <p className="text-primary-100 text-lg">
                  Ecco come stanno andando i tuoi piccoli campioni dell'igiene dentale!
                </p>
              </div>
              <button
                onClick={() => setShowAddChildModal(true)}
                className="bg-white text-primary-600 px-6 py-3 rounded-lg font-semibold hover:bg-primary-50 transition-colors flex items-center space-x-2"
                disabled={isCreating}
              >
                {isCreating ? (
                  <LoadingSpinner size="small" variant="primary" />
                ) : (
                  <PlusIcon className="h-5 w-5" />
                )}
                <span>Aggiungi Bambino</span>
              </button>
            </div>
          </div>

          {/* Quick Stats Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {/* Total Children */}
            <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100 hover:shadow-md transition-shadow">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Bambini Registrati</p>
                  <p className="text-3xl font-bold text-gray-900 mt-1">{displayChildren.length}</p>
                </div>
                <div className="p-3 bg-blue-100 rounded-lg">
                  <UserIcon className="h-6 w-6 text-blue-600" />
                </div>
              </div>
            </div>

            {/* Total Points */}
            <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100 hover:shadow-md transition-shadow">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Punti Totali</p>
                  <p className="text-3xl font-bold text-gray-900 mt-1">{totalPoints}</p>
                </div>
                <div className="p-3 bg-yellow-100 rounded-lg">
                  <TrophyIcon className="h-6 w-6 text-yellow-600" />
                </div>
              </div>
            </div>

            {/* Total Activities */}
            <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100 hover:shadow-md transition-shadow">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Attività Completate</p>
                  <p className="text-3xl font-bold text-gray-900 mt-1">{totalActivities}</p>
                </div>
                <div className="p-3 bg-green-100 rounded-lg">
                  <AcademicCapIcon className="h-6 w-6 text-green-600" />
                </div>
              </div>
            </div>

            {/* Average Progress */}
            <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100 hover:shadow-md transition-shadow">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Progresso Medio</p>
                  <p className="text-3xl font-bold text-gray-900 mt-1">{averageProgress}%</p>
                </div>
                <div className="p-3 bg-purple-100 rounded-lg">
                  <ChartBarIcon className="h-6 w-6 text-purple-600" />
                </div>
              </div>
            </div>
          </div>

          {/* Quick Actions */}
          <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">Azioni Rapide</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Link
                to="/parent/game"
                className="p-4 border-2 border-dashed border-gray-200 rounded-lg hover:border-primary-300 hover:bg-primary-50 transition-colors group"
              >
                <div className="text-center">
                  <PlayIcon className="h-8 w-8 text-gray-400 group-hover:text-primary-500 mx-auto mb-2" />
                  <h3 className="font-medium text-gray-900">Inizia Gioco</h3>
                  <p className="text-sm text-gray-500">Avvia una nuova sessione di gioco</p>
                </div>
              </Link>

              <button
                onClick={() => setShowAddChildModal(true)}
                className="p-4 border-2 border-dashed border-gray-200 rounded-lg hover:border-green-300 hover:bg-green-50 transition-colors group"
              >
                <div className="text-center">
                  <PlusIcon className="h-8 w-8 text-gray-400 group-hover:text-green-500 mx-auto mb-2" />
                  <h3 className="font-medium text-gray-900">Aggiungi Bambino</h3>
                  <p className="text-sm text-gray-500">Registra un nuovo bambino</p>
                </div>
              </button>

              <Link
                to="/parent/reports"
                className="p-4 border-2 border-dashed border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-colors group"
              >
                <div className="text-center">
                  <ChartBarIcon className="h-8 w-8 text-gray-400 group-hover:text-blue-500 mx-auto mb-2" />
                  <h3 className="font-medium text-gray-900">Visualizza Report</h3>
                  <p className="text-sm text-gray-500">Controlla i progressi</p>
                </div>
              </Link>
            </div>
          </div>

          {/* Children Management - Table View for Large Screens */}
          <div className="hidden lg:block bg-white rounded-xl shadow-sm border border-gray-100">
            <div className="p-6 border-b border-gray-100">
              <div className="flex justify-between items-center">
                <div>
                  <h2 className="text-xl font-semibold text-gray-900">I Tuoi Bambini</h2>
                  <p className="text-sm text-gray-500 mt-1">
                    Gestisci i profili e monitora i progressi dei tuoi bambini
                  </p>
                </div>
                <button
                  onClick={() => setShowAddChildModal(true)}
                  className="btn-primary flex items-center space-x-2"
                  disabled={isCreating}
                >
                  {isCreating ? (
                    <LoadingSpinner size="small" variant="white" />
                  ) : (
                    <PlusIcon className="h-4 w-4" />
                  )}
                  <span>Nuovo Bambino</span>
                </button>
              </div>
            </div>

            <div className="p-6">
              <DataTable
                data={displayChildren}
                columns={childrenColumns}
                actions={childrenActions}
                loading={childrenLoading}
                searchable
                sortable
                pagination
                emptyMessage="Nessun bambino registrato. Aggiungi il primo bambino per iniziare!"
                searchPlaceholder="Cerca bambini..."
                onRowClick={(child) => navigate(`/parent/child/${child.id}`)}
              />
            </div>
          </div>

          {/* Children Management - Card View for Mobile/Tablet */}
          <div className="lg:hidden bg-white rounded-xl shadow-sm border border-gray-100">
            <div className="p-6 border-b border-gray-100">
              <div className="flex justify-between items-center">
                <div>
                  <h2 className="text-xl font-semibold text-gray-900">I Tuoi Bambini</h2>
                  <p className="text-sm text-gray-500 mt-1">
                    Gestisci i profili e monitora i progressi dei tuoi bambini
                  </p>
                </div>
                <button
                  onClick={() => setShowAddChildModal(true)}
                  className="btn-primary flex items-center space-x-2"
                  disabled={isCreating}
                >
                  {isCreating ? (
                    <LoadingSpinner size="small" variant="white" />
                  ) : (
                    <PlusIcon className="h-4 w-4" />
                  )}
                  <span>Nuovo</span>
                </button>
              </div>
            </div>

            <div className="p-6">
              {displayChildren.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {displayChildren.map((child) => (
                    <div key={child.id} className="border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow">
                      <div className="flex items-center justify-between mb-4">
                        <div className="flex items-center space-x-3">
                          <div className="w-12 h-12 bg-gradient-to-r from-primary-500 to-secondary-500 rounded-full flex items-center justify-center text-white text-lg font-semibold">
                            {child.avatar || child.name.charAt(0)}
                          </div>
                          <div>
                            <h3 className="font-semibold text-gray-900">{child.name}</h3>
                            <p className="text-sm text-gray-500">{child.age} anni</p>
                          </div>
                        </div>
                        <div className="flex space-x-2">
                          <button
                            onClick={() => navigate(`/parent/game/${child.id}`)}
                            className="text-green-600 hover:text-green-800 p-1"
                            title="Inizia Gioco"
                          >
                            <PlayIcon className="h-5 w-5" />
                          </button>
                          <button
                            onClick={() => navigate(`/parent/child/${child.id}`)}
                            className="text-blue-600 hover:text-blue-800 p-1"
                            title="Visualizza"
                          >
                            <EyeIcon className="h-5 w-5" />
                          </button>
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-2 gap-4 mb-4">
                        <div className="text-center">
                          <p className="text-2xl font-bold text-primary-600">{child.totalPoints || 0}</p>
                          <p className="text-xs text-gray-600">Punti</p>
                        </div>
                        <div className="text-center">
                          <p className="text-2xl font-bold text-secondary-600">Lv. {child.level || 1}</p>
                          <p className="text-xs text-gray-600">Livello</p>
                        </div>
                      </div>
                      
                      <div className="mb-4">
                        <div className="flex justify-between text-xs text-gray-600 mb-1">
                          <span>Progresso</span>
                          <span>{child.progress || 0}%</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div 
                            className="bg-gradient-to-r from-primary-500 to-secondary-500 h-2 rounded-full transition-all duration-500" 
                            style={{ width: `${child.progress || 0}%` }}
                          />
                        </div>
                      </div>
                      
                      <div className="flex justify-between items-center text-xs text-gray-500">
                        <span>Streak: {child.currentStreak || 0} giorni</span>
                        <span>{child.completedActivities || 0} attività</span>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-12">
                  <UserIcon className="h-12 w-12 text-gray-300 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">Nessun bambino registrato</h3>
                  <p className="text-gray-500 mb-4">Aggiungi il primo bambino per iniziare!</p>
                  <button
                    onClick={() => setShowAddChildModal(true)}
                    className="btn-primary"
                  >
                    Aggiungi Primo Bambino
                  </button>
                </div>
              )}
            </div>
          </div>

          {/* Recent Activities */}
          {displayActivities.length > 0 && (
            <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-semibold text-gray-900">Attività Recenti</h2>
                <Link 
                  to="/parent/activities" 
                  className="text-primary-600 hover:text-primary-700 text-sm font-medium"
                >
                  Vedi tutte →
                </Link>
              </div>
              
              <div className="space-y-4">
                {displayActivities.slice(0, 5).map((activity) => (
                  <div key={activity.id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                        <TrophyIcon className="h-5 w-5 text-green-600" />
                      </div>
                      <div>
                        <p className="font-medium text-gray-900">{activity.title}</p>
                        <p className="text-sm text-gray-500">
                          {activity.child?.name} • {formatTimestamp(activity.completedAt)}
                        </p>
                      </div>
                    </div>
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                      +{activity.pointsReward} punti
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Modals */}
          <FormModal
            isOpen={showAddChildModal}
            onClose={() => setShowAddChildModal(false)}
            onSubmit={handleAddChild}
            title="Aggiungi Nuovo Bambino"
            isLoading={isCreating}
            size="lg"
            submitDisabled={!isFormValid}
          >
            <ChildForm 
              onValidation={setIsFormValid}
            />
          </FormModal>

          <FormModal
            isOpen={showEditChildModal}
            onClose={() => {
              setShowEditChildModal(false);
              setSelectedChild(null);
            }}
            onSubmit={handleEditChild}
            title="Modifica Bambino"
            isLoading={false}
            size="lg"
            submitDisabled={!isFormValid}
          >
            <ChildForm 
              initialData={selectedChild}
              onValidation={setIsFormValid}
            />
          </FormModal>

          <ConfirmationModal
            isOpen={showDeleteModal}
            onClose={() => {
              setShowDeleteModal(false);
              setChildToDelete(null);
            }}
            onConfirm={handleDeleteChild}
            title="Elimina Bambino"
            message={`Sei sicuro di voler eliminare il profilo di ${childToDelete?.name}? Questa azione non può essere annullata.`}
            confirmText="Elimina"
            cancelText="Annulla"
            variant="danger"
            isLoading={false}
          />
        </div>
      </DashboardLayout>
    </ErrorBoundary>
  );
};

/**
 * Child Form Component
 * Form component for adding/editing child profiles
 */
const ChildForm = ({ initialData, onValidation }) => {
  const [formData, setFormData] = useState(initialData || {
    name: '',
    age: '',
    birthDate: '',
    notes: '',
    avatar: ''
  });

  const [errors, setErrors] = useState({});

  const validateForm = useCallback(() => {
    const newErrors = {};
    
    if (!formData.name?.trim()) {
      newErrors.name = 'Il nome è obbligatorio';
    }
    
    if (!formData.age || formData.age < 1 || formData.age > 18) {
      newErrors.age = 'Inserisci un\'età valida (1-18 anni)';
    }
    
    if (!formData.birthDate) {
      newErrors.birthDate = 'La data di nascita è obbligatoria';
    } else {
      const birthDate = new Date(formData.birthDate);
      const today = new Date();
      const age = Math.floor((today - birthDate) / (365.25 * 24 * 60 * 60 * 1000));
      
      if (age < 1 || age > 18) {
        newErrors.birthDate = 'Il bambino deve avere tra 1 e 18 anni';
      }
    }

    setErrors(newErrors);
    const isValid = Object.keys(newErrors).length === 0;
    onValidation?.(isValid);
    return isValid;
  }, [formData, onValidation]);

  React.useEffect(() => {
    validateForm();
  }, [validateForm]);

  React.useEffect(() => {
    if (initialData) {
      setFormData(initialData);
    }
  }, [initialData]);

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const avatarOptions = ['👦', '👧', '🧒', '👶', '🙋‍♂️', '🙋‍♀️', '🧑‍🦱', '👱‍♂️', '👱‍♀️'];

  return (
    <div className="space-y-6">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Nome Completo *
        </label>
        <input
          type="text"
          value={formData.name}
          onChange={(e) => handleChange('name', e.target.value)}
          className={`input ${errors.name ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
          placeholder="Inserisci il nome del bambino"
        />
        {errors.name && (
          <p className="mt-1 text-sm text-red-600">{errors.name}</p>
        )}
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Età *
          </label>
          <input
            type="number"
            min="1"
            max="18"
            value={formData.age}
            onChange={(e) => handleChange('age', parseInt(e.target.value) || '')}
            className={`input ${errors.age ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
            placeholder="Età"
          />
          {errors.age && (
            <p className="mt-1 text-sm text-red-600">{errors.age}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Data di Nascita *
          </label>
          <input
            type="date"
            value={formData.birthDate}
            onChange={(e) => handleChange('birthDate', e.target.value)}
            className={`input ${errors.birthDate ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
            max={new Date().toISOString().split('T')[0]}
          />
          {errors.birthDate && (
            <p className="mt-1 text-sm text-red-600">{errors.birthDate}</p>
          )}
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Avatar
        </label>
        <div className="grid grid-cols-9 gap-2">
          {avatarOptions.map((avatar) => (
            <button
              key={avatar}
              type="button"
              onClick={() => handleChange('avatar', avatar)}
              className={`w-10 h-10 rounded-lg border-2 flex items-center justify-center text-lg hover:border-primary-300 transition-colors ${
                formData.avatar === avatar 
                  ? 'border-primary-500 bg-primary-50' 
                  : 'border-gray-200 bg-white'
              }`}
            >
              {avatar}
            </button>
          ))}
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Note (Opzionale)
        </label>
        <textarea
          value={formData.notes}
          onChange={(e) => handleChange('notes', e.target.value)}
          className="input"
          rows="3"
          placeholder="Note aggiuntive sul bambino..."
        />
        <p className="mt-1 text-sm text-gray-500">
          Aggiungi informazioni utili come allergie, preferenze o note particolari.
        </p>
      </div>
    </div>
  );
};

export default ParentDashboard;
